// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry      = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function head(ll) {
  if (ll) {
    return /* Some */[ll[0]];
  } else {
    return /* None */0;
  }
}

function tail(_ll) {
  while(true) {
    var ll = _ll;
    if (ll) {
      var y = ll[1];
      if (y) {
        _ll = y;
        continue ;
        
      } else {
        return /* Some */[ll[0]];
      }
    } else {
      return /* None */0;
    }
  };
}

function prepend(x, ll) {
  return /* Head */[
          x,
          ll
        ];
}

function revAux(_l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      _l2 = /* Head */[
        l1[0],
        l2
      ];
      _l1 = l1[1];
      continue ;
      
    } else {
      return l2;
    }
  };
}

function rev(ll) {
  return revAux(ll, /* Empty */0);
}

function forEach(f, _ll) {
  while(true) {
    var ll = _ll;
    if (ll) {
      var y = ll[1];
      var x = ll[0];
      if (y) {
        Curry._1(f, x);
        _ll = y;
        continue ;
        
      } else {
        return Curry._1(f, x);
      }
    } else {
      return /* () */0;
    }
  };
}

function mapAux(f, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      _l2 = /* Head */[
        Curry._1(f, l1[0]),
        l2
      ];
      _l1 = l1[1];
      continue ;
      
    } else {
      return l2;
    }
  };
}

function map(f, ll) {
  return revAux(mapAux(f, ll, /* Empty */0), /* Empty */0);
}

function filterAux(f, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      var y = l1[1];
      var x = l1[0];
      var match = Curry._1(f, x);
      if (match !== 0) {
        _l2 = /* Head */[
          x,
          l2
        ];
        _l1 = y;
        continue ;
        
      } else {
        _l1 = y;
        continue ;
        
      }
    } else {
      return l2;
    }
  };
}

function filter(f, ll) {
  return revAux(filterAux(f, ll, /* Empty */0), /* Empty */0);
}

function find(f, _ll) {
  while(true) {
    var ll = _ll;
    if (ll) {
      var x = ll[0];
      var match = Curry._1(f, x);
      if (match !== 0) {
        return /* Some */[x];
      } else {
        _ll = ll[1];
        continue ;
        
      }
    } else {
      return /* None */0;
    }
  };
}

function lengthAux(_ll, _count) {
  while(true) {
    var count = _count;
    var ll = _ll;
    if (ll) {
      var next = ll[1];
      if (next) {
        _count = count + 1 | 0;
        _ll = next;
        continue ;
        
      } else {
        return count;
      }
    } else {
      return 0;
    }
  };
}

function length(ll) {
  return lengthAux(ll, 1);
}

function nthAux(_ll, n, _count) {
  while(true) {
    var count = _count;
    var ll = _ll;
    if (n === count) {
      if (ll) {
        return /* Some */[ll[0]];
      } else {
        return /* None */0;
      }
    } else if (ll) {
      _count = count + 1 | 0;
      _ll = ll[1];
      continue ;
      
    } else {
      return /* None */0;
    }
  };
}

function nth(ll, n) {
  return nthAux(ll, n, 0);
}

function fromListAux(_l, _ll) {
  while(true) {
    var ll = _ll;
    var l = _l;
    if (l) {
      _ll = /* Head */[
        l[0],
        ll
      ];
      _l = l[1];
      continue ;
      
    } else {
      return ll;
    }
  };
}

function fromList(l) {
  return revAux(fromListAux(l, /* Empty */0), /* Empty */0);
}

function $at$colon(a, b) {
  return /* Head */[
          a,
          b
        ];
}

var Infix = /* module */[/* @: */$at$colon];

var LinkedList = /* module */[
  /* head */head,
  /* tail */tail,
  /* prepend */prepend,
  /* rev */rev,
  /* forEach */forEach,
  /* map */map,
  /* filter */filter,
  /* find */find,
  /* length */length,
  /* nth */nth,
  /* fromList */fromList,
  /* Infix */Infix
];

var foo = /* Head */[
  0,
  /* Head */[
    1,
    /* Head */[
      2,
      /* Empty */0
    ]
  ]
];

console.log("foo");

console.log(foo);

console.log("head");

console.log(head(foo));

console.log("tail");

console.log(tail(foo));

console.log("length");

console.log(lengthAux(foo, 1));

console.log("second");

console.log(nthAux(foo, 1, 0));

var bar = /* Head */[
  -1,
  foo
];

console.log("bar");

console.log(bar);

console.log("head");

console.log(head(bar));

console.log("tail");

console.log(tail(bar));

console.log("length");

console.log(lengthAux(bar, 1));

console.log("second");

console.log(nthAux(bar, 1, 0));

var baz = /* Head */[
  0,
  /* Head */[
    1,
    /* Head */[
      2,
      /* Head */[
        3,
        /* Head */[
          4,
          /* Head */[
            5,
            /* Empty */0
          ]
        ]
      ]
    ]
  ]
];

console.log("baz");

forEach((function (prim) {
        console.log(prim);
        return /* () */0;
      }), baz);

var inOrder_001 = /* Head */[
  1,
  /* Head */[
    2,
    /* Head */[
      3,
      /* Empty */0
    ]
  ]
];

var inOrder = /* Head */[
  0,
  inOrder_001
];

console.log("rev");

console.log(revAux(inOrder, /* Empty */0));

var llFromList = revAux(fromListAux(/* :: */[
          5,
          /* :: */[
            4,
            /* :: */[
              3,
              /* :: */[
                2,
                /* :: */[
                  1,
                  /* [] */0
                ]
              ]
            ]
          ]
        ], /* Empty */0), /* Empty */0);

console.log("from list");

console.log(llFromList);

var ones_001 = /* Head */[
  2,
  /* Head */[
    3,
    /* Head */[
      4,
      /* Head */[
        5,
        /* Empty */0
      ]
    ]
  ]
];

var ones = /* Head */[
  1,
  ones_001
];

var tens = map((function (a) {
        return Caml_int32.imul(a, 10);
      }), ones);

console.log("map");

forEach((function (prim) {
        console.log(prim);
        return /* () */0;
      }), tens);

console.log("filter");

console.log(filter((function (n) {
            return +(n % 2 === 0);
          }), ones));

console.log("find");

console.log(find((function (n) {
            return +(n === 4);
          }), ones));

exports.LinkedList = LinkedList;
exports.foo        = foo;
exports.bar        = bar;
exports.baz        = baz;
exports.inOrder    = inOrder;
exports.llFromList = llFromList;
exports.ones       = ones;
exports.tens       = tens;
/*  Not a pure module */
