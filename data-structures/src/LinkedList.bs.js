// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry   = require("bs-platform/lib/js/curry.js");

function make(x) {
  return /* Head */[
          x,
          /* Empty */0
        ];
}

function head(ll) {
  if (ll) {
    return /* Some */[ll[0]];
  } else {
    return /* None */0;
  }
}

function tail(_ll) {
  while(true) {
    var ll = _ll;
    if (ll) {
      var y = ll[1];
      if (y) {
        _ll = y;
        continue ;
        
      } else {
        return /* Some */[ll[0]];
      }
    } else {
      return /* None */0;
    }
  };
}

function prepend(x, ll) {
  return /* Head */[
          x,
          ll
        ];
}

function rev(ll) {
  var _l1 = ll;
  var _l2 = /* Empty */0;
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      _l2 = /* Head */[
        l1[0],
        l2
      ];
      _l1 = l1[1];
      continue ;
      
    } else {
      return l2;
    }
  };
}

function forEach(f, _ll) {
  while(true) {
    var ll = _ll;
    if (ll) {
      var y = ll[1];
      var x = ll[0];
      if (y) {
        Curry._1(f, x);
        _ll = y;
        continue ;
        
      } else {
        return Curry._1(f, x);
      }
    } else {
      return /* () */0;
    }
  };
}

function mapAux(f, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      _l2 = /* Head */[
        Curry._1(f, l1[0]),
        l2
      ];
      _l1 = l1[1];
      continue ;
      
    } else {
      return l2;
    }
  };
}

function map(f, ll) {
  return rev(mapAux(f, ll, /* Empty */0));
}

function reduce(f, ll, x) {
  var f$1 = f;
  var _ll = ll;
  var _x = x;
  while(true) {
    var x$1 = _x;
    var ll$1 = _ll;
    if (ll$1) {
      _x = Curry._2(f$1, x$1, ll$1[0]);
      _ll = ll$1[1];
      continue ;
      
    } else {
      return x$1;
    }
  };
}

function filterAux(f, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      var y = l1[1];
      var x = l1[0];
      var match = Curry._1(f, x);
      if (match !== 0) {
        _l2 = /* Head */[
          x,
          l2
        ];
        _l1 = y;
        continue ;
        
      } else {
        _l1 = y;
        continue ;
        
      }
    } else {
      return l2;
    }
  };
}

function filter(f, ll) {
  return rev(filterAux(f, ll, /* Empty */0));
}

function find(f, _ll) {
  while(true) {
    var ll = _ll;
    if (ll) {
      var x = ll[0];
      var match = Curry._1(f, x);
      if (match !== 0) {
        return /* Some */[x];
      } else {
        _ll = ll[1];
        continue ;
        
      }
    } else {
      return /* None */0;
    }
  };
}

function length(ll) {
  var _ll = ll;
  var _count = 1;
  while(true) {
    var count = _count;
    var ll$1 = _ll;
    if (ll$1) {
      var next = ll$1[1];
      if (next) {
        _count = count + 1 | 0;
        _ll = next;
        continue ;
        
      } else {
        return count;
      }
    } else {
      return 0;
    }
  };
}

function nth(ll, n) {
  var _ll = ll;
  var n$1 = n;
  var _count = 0;
  while(true) {
    var count = _count;
    var ll$1 = _ll;
    if (n$1 === count) {
      if (ll$1) {
        return /* Some */[ll$1[0]];
      } else {
        return /* None */0;
      }
    } else if (ll$1) {
      _count = count + 1 | 0;
      _ll = ll$1[1];
      continue ;
      
    } else {
      return /* None */0;
    }
  };
}

function fromListAux(_l, _ll) {
  while(true) {
    var ll = _ll;
    var l = _l;
    if (l) {
      _ll = /* Head */[
        l[0],
        ll
      ];
      _l = l[1];
      continue ;
      
    } else {
      return ll;
    }
  };
}

function fromList(l) {
  return rev(fromListAux(l, /* Empty */0));
}

function fromArray(l) {
  var a = l;
  var ll = /* Empty */0;
  if (a.length !== 0) {
    return $$Array.fold_right((function (curr, acc) {
                  return /* Head */[
                          curr,
                          acc
                        ];
                }), a, ll);
  } else {
    return ll;
  }
}

function $at$colon(a, b) {
  return /* Head */[
          a,
          b
        ];
}

var Infix = /* module */[/* @: */$at$colon];

exports.make      = make;
exports.head      = head;
exports.tail      = tail;
exports.prepend   = prepend;
exports.rev       = rev;
exports.forEach   = forEach;
exports.map       = map;
exports.reduce    = reduce;
exports.filter    = filter;
exports.find      = find;
exports.length    = length;
exports.nth       = nth;
exports.fromList  = fromList;
exports.fromArray = fromArray;
exports.Infix     = Infix;
/* No side effect */
