// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list.js");
var $$Array    = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function make(x) {
  return /* Node */[
          /* [] */0,
          x,
          /* [] */0
        ];
}

function prepend(x, y) {
  if (y) {
    var c = y[2];
    var b = y[1];
    var a = y[0];
    if (a) {
      return /* Node */[
              /* :: */[
                x,
                a
              ],
              b,
              c
            ];
    } else {
      return /* Node */[
              /* :: */[
                x,
                /* [] */0
              ],
              b,
              c
            ];
    }
  } else {
    return /* Node */[
            /* [] */0,
            x,
            /* [] */0
          ];
  }
}

function append(x, y) {
  if (x) {
    var c = x[2];
    var b = x[1];
    var a = x[0];
    if (c) {
      return /* Node */[
              a,
              b,
              List.rev_append(c, /* :: */[
                    y,
                    /* [] */0
                  ])
            ];
    } else {
      return /* Node */[
              a,
              b,
              /* :: */[
                y,
                /* [] */0
              ]
            ];
    }
  } else {
    return /* Node */[
            /* [] */0,
            y,
            /* [] */0
          ];
  }
}

function prev(x) {
  if (x) {
    var match = List.rev(x[0]);
    if (match) {
      return /* Some */[/* Node */[
                match[1],
                match[0],
                /* :: */[
                  x[1],
                  x[2]
                ]
              ]];
    } else {
      return /* None */0;
    }
  } else {
    return /* None */0;
  }
}

function next(x) {
  if (x) {
    var c = x[2];
    if (c) {
      return /* Some */[/* Node */[
                List.rev_append(x[0], /* :: */[
                      x[1],
                      /* [] */0
                    ]),
                c[0],
                c[1]
              ]];
    } else {
      return /* None */0;
    }
  } else {
    return /* None */0;
  }
}

function curr(x) {
  if (x) {
    return /* Some */[x[1]];
  } else {
    return /* None */0;
  }
}

function fromList(l) {
  if (l) {
    return /* Node */[
            /* [] */0,
            l[0],
            l[1]
          ];
  } else {
    return /* Empty */0;
  }
}

function fromArray(l) {
  if (l.length !== 0) {
    return /* Node */[
            /* [] */0,
            Caml_array.caml_array_get(l, 0),
            $$Array.to_list($$Array.sub(l, 1, l.length - 1 | 0))
          ];
  } else {
    return /* Empty */0;
  }
}

function curr$1(x) {
  if (x) {
    return curr(x[0]);
  } else {
    return /* None */0;
  }
}

var Maybe = /* module */[/* curr */curr$1];

exports.make      = make;
exports.prepend   = prepend;
exports.append    = append;
exports.prev      = prev;
exports.next      = next;
exports.curr      = curr;
exports.fromList  = fromList;
exports.fromArray = fromArray;
exports.Maybe     = Maybe;
/* No side effect */
