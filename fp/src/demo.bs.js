// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list.js");
var $$Array    = require("bs-platform/lib/js/array.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var Hashtbl    = require("bs-platform/lib/js/hashtbl.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function take(numberToTake, data) {
  return $$Array.sub(data, 0, numberToTake);
}

function skip(numberToSkip, data) {
  return $$Array.sub(data, numberToSkip, data.length - numberToSkip | 0);
}

function tap(effect, data) {
  Curry._1(effect, data);
  return data;
}

function find(predicate, data) {
  var result = [Caml_array.caml_array_get(data, 0)];
  var foundResult = [/* false */0];
  $$Array.iter((function (x) {
          if (!foundResult[0] && Curry._1(predicate, x)) {
            result[0] = x;
            foundResult[0] = /* true */1;
            return /* () */0;
          } else {
            return 0;
          }
        }), data);
  return result[0];
}

function filter(predicate, data) {
  var filtered = [/* array */[]];
  $$Array.iter((function (x) {
          if (Curry._1(predicate, x)) {
            filtered[0] = $$Array.append(filtered[0], /* array */[x]);
            return /* () */0;
          } else {
            return 0;
          }
        }), data);
  return filtered[0];
}

function reject(predicate, data) {
  var filtered = [/* array */[]];
  $$Array.iter((function (x) {
          if (Curry._1(predicate, x)) {
            return 0;
          } else {
            filtered[0] = $$Array.append(filtered[0], /* array */[x]);
            return /* () */0;
          }
        }), data);
  return filtered[0];
}

function reverse(data) {
  return $$Array.of_list(List.rev($$Array.to_list(data)));
}

function unique(data) {
  var hash = Hashtbl.create(/* None */0, data.length);
  var uniqueArray = [/* array */[]];
  $$Array.iter((function (x) {
          if (Hashtbl.mem(hash, x)) {
            return 0;
          } else {
            Hashtbl.add(hash, x, /* true */1);
            uniqueArray[0] = $$Array.append(uniqueArray[0], /* array */[x]);
            return /* () */0;
          }
        }), data);
  Hashtbl.clear(hash);
  return uniqueArray[0];
}

function concatAll(data) {
  return $$Array.fold_left($$Array.append, /* array */[], data);
}

function concatMap(f) {
  var partial_arg = /* array */[];
  return (function (param) {
      return $$Array.fold_left((function (a, b) {
                    return $$Array.append(a, Curry._1(f, b));
                  }), partial_arg, param);
    });
}

var reduce = $$Array.fold_left;

var reduceRight = $$Array.fold_right;

var map = $$Array.map;

var forEach = $$Array.iter;

exports.take        = take;
exports.skip        = skip;
exports.tap         = tap;
exports.find        = find;
exports.filter      = filter;
exports.reject      = reject;
exports.reverse     = reverse;
exports.unique      = unique;
exports.concatAll   = concatAll;
exports.concatMap   = concatMap;
exports.reduce      = reduce;
exports.reduceRight = reduceRight;
exports.map         = map;
exports.forEach     = forEach;
/* No side effect */
